package edu.cnm.deepdive.stockrollersservice.controller;

import edu.cnm.deepdive.stockrollersservice.model.dao.IndustryRepository;
import edu.cnm.deepdive.stockrollersservice.model.entity.Industry;
import edu.cnm.deepdive.stockrollersservice.model.entity.Stock;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/industries")
public class IndustryController {

  private final IndustryRepository industryRepository;

  @Autowired
  public IndustryController(IndustryRepository industryRepository) {
    this.industryRepository = industryRepository;
  }

  /**
   * Gets a list of all the industries.
   * @param id
   * @return
   */
//  @GetMapping(value = "{id}", produces = MediaType.APPLICATION_JSON_VALUE)
//  public List<Industry> getIndustries(@PathVariable long id) {
//    return industryRepository.getAllOrderByName(get(id));
//    //return get(id).getIndustries();
//  } says its ambiguous

  /**
   * Gets a single industry.
   * @param id
   * @return
   */
  @GetMapping(value = "{id}", produces = MediaType.APPLICATION_JSON_VALUE)
  public Industry get(@PathVariable long id) {
    return industryRepository.findById(id).get();
  }

  /**
   * Gets a list of stocks based industry.
   * @param id
   * @return
   */
  //May not need this Later on because it should/could get autogenerated.
  @GetMapping(value = "{id}/stocks", produces = MediaType.APPLICATION_JSON_VALUE)
  public List<Stock> getStocks(@PathVariable long id) {
    return get(id).getStocks();
  }

  @ResponseStatus(HttpStatus.NOT_FOUND)
  @ExceptionHandler(NoSuchElementException.class)
  public void notFound() {
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler(Exception.class)
  public void badRequest() {
  }


}
